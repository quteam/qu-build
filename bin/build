#!/usr/bin/env node

function interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj,
  };
}

const path = require('path');
const jest = require('jest');
const program = require('commander');
// const chalk = require('chalk');
const build = require('../lib/build');
const buildInit = interopRequireDefault(require('../lib/build-init')).default;
const createComponent = interopRequireDefault(require('../lib/create-component')).default;

const _build = interopRequireDefault(build).default;

program
  .version(require('../package').version, '-v, --version')
  .option('-o, --output-path <path>', 'output path')
  .option('-w, --watch [delay]', 'watch file changes and rebuild')
  .option('-d, --dev', 'start develop server')
  .option('-p, --port [port]', 'develop server port, default is 8080')
  .option('-b, --build', 'build this project')
  .option('-t, --test', 'test this project, use jest')
  .option('-c, --component <component>', 'quickly create components')
  .option('--pwa', 'use pwa')
  .option('--hash', 'build with hash and output map.json')
  .option('--publicPath <publicPath>', 'publicPath for webpack')
  .option('--devtool <devtool>', 'sourcemap generate method, default is null')
  .option('--config <path>', 'custom config path, default is webpack.config.js')
  .option('--cwd <path>', 'custom context path')
  .option('--no-compress', 'build without compress')
  .option('--json', 'running webpack with --json, ex. result.json')
  .option('--verbose', 'run with more logging messages.')
  .option('--init <template> <project>', 'generate a new project from a template. template: [vue, pages]');

program.parse(process.argv);
program.cwd = program.cwd ? path.resolve(program.cwd) : process.cwd();

// 快速创建组件
if (program.component) {
  createComponent(program);
  return;
}

// 模版初始化
if (program.init) {
  buildInit(program);
  return;
}

// watch 模式
if (program.watch) {
  _build(program);
  return;
}

// 测试模式
if (program.test) {
  jest.run(`--config ${__dirname}/../jest.config.js --no-cache`);
  return;
}

// 开发/生产模式
if (program.dev || program.build) {
  _build(program, (err) => {
    if (err) {
      process.exit(1);
    }
    process.exit(0);
  });
} else {
  console.error('output usage information: qu-build -h');
}
